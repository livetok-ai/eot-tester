#!/usr/bin/env python3
"""Simple test script to verify LiveKit integration."""

import sys
from pathlib import Path

# Add the project to path
sys.path.insert(0, str(Path(__file__).parent))

def test_import():
    """Test that we can import the LiveKit algorithm."""
    try:
        from eot_tester.algorithms import LiveKitAlgorithm
        print("‚úì Successfully imported LiveKitAlgorithm")
        return True
    except ImportError as e:
        print(f"‚úó Failed to import LiveKitAlgorithm: {e}")
        return False

def test_instantiation():
    """Test that we can create instances of the algorithm."""
    try:
        from eot_tester.algorithms import LiveKitAlgorithm
        
        # Test English model
        algo_en = LiveKitAlgorithm(model_type="en")
        print(f"‚úì Successfully created English algorithm: {algo_en.name}")
        
        # Test multilingual model
        algo_multi = LiveKitAlgorithm(model_type="multilingual")
        print(f"‚úì Successfully created multilingual algorithm: {algo_multi.name}")
        
        return True
    except Exception as e:
        print(f"‚úó Failed to create algorithm instances: {e}")
        return False

def test_base_interface():
    """Test that the algorithm implements the base interface correctly."""
    try:
        from eot_tester.algorithms import LiveKitAlgorithm
        from eot_tester.base import EOTAlgorithm, EOTResult, EOTState
        
        algo = LiveKitAlgorithm(model_type="en")
        
        # Check inheritance
        assert isinstance(algo, EOTAlgorithm), "Algorithm should inherit from EOTAlgorithm"
        
        # Check required methods exist
        assert hasattr(algo, 'detect'), "Algorithm should have detect method"
        assert hasattr(algo, 'initialize'), "Algorithm should have initialize method"
        
        print("‚úì Algorithm correctly implements base interface")
        return True
    except Exception as e:
        print(f"‚úó Interface test failed: {e}")
        return False

def test_without_dependencies():
    """Test behavior when dependencies are not available."""
    try:
        from eot_tester.algorithms import LiveKitAlgorithm
        
        algo = LiveKitAlgorithm(model_type="en")
        
        # This should fail gracefully if dependencies are missing
        try:
            algo.initialize()
            print("‚úì Algorithm initialized (dependencies available)")
        except ImportError as e:
            if "Required dependencies not available" in str(e):
                print("‚úì Algorithm gracefully handles missing dependencies")
            else:
                print(f"‚úó Unexpected import error: {e}")
                return False
        except Exception as e:
            print(f"‚Ñπ Algorithm initialization failed (expected without models): {type(e).__name__}")
        
        return True
    except Exception as e:
        print(f"‚úó Dependency test failed: {e}")
        return False

if __name__ == "__main__":
    print("Testing LiveKit Integration...")
    print("=" * 50)
    
    tests = [
        test_import,
        test_instantiation,
        test_base_interface,
        test_without_dependencies,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        print(f"\nRunning {test.__name__}...")
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚úó Test {test.__name__} crashed: {e}")
    
    print("\n" + "=" * 50)
    print(f"Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! LiveKit integration is working.")
        sys.exit(0)
    else:
        print("‚ùå Some tests failed. Check the output above.")
        sys.exit(1)